import sys
import requests
from veracode_api_signing.plugin_requests import RequestsAuthPluginVeracodeHMAC

# === Configuração da API ===
API_BASE_V2 = "https://api.veracode.com/appsec/v2"
API_BASE_V1 = "https://api.veracode.com/appsec/v1"
HEADERS = {"User-Agent": "Python HMAC SCA Scanner"}

# === Parâmetros ===
APPLICATION_GUID = "SEU_APPLICATION_GUID_AQUI"  # << substitua pelo GUID correto
TARGET_CVE = "CVE-2016-10532"  # << coloque aqui a CVE específica que você quer mitigar
COMMENT_FP = f"Mitigado como falso positivo para {TARGET_CVE} após revisão técnica."

# === Buscar findings SCA ===
def get_sca_findings(app_guid):
    url = f"{API_BASE_V2}/applications/{app_guid}/findings"
    params = {"scan_type": "SCA"}
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC(), headers=HEADERS, params=params)
    response.raise_for_status()
    return response.json()

# === Aplicar anotação FP ===
def annotate_fp(app_guid, finding_guid, context_guid, scan_type="SCA", comment=COMMENT_FP):
    url = f"{API_BASE_V1}/applications/{app_guid}/annotations"
    payload = {
        "finding_guid": finding_guid,
        "context_guid": context_guid,
        "scan_type": scan_type,
        "action": "FP",
        "comment": comment
    }
    response = requests.post(url, json=payload, auth=RequestsAuthPluginVeracodeHMAC(), headers=HEADERS)
    response.raise_for_status()
    return response.json()

# === Execução principal ===
def executar_fp_para_cve_especifica():
    try:
        print("[...] Buscando todos os findings SCA da aplicação...")
        resultado = get_sca_findings(APPLICATION_GUID)
        findings = resultado.get("_embedded", {}).get("findings", [])
        print(f"[✓] Total de findings SCA encontrados: {len(findings)}")

        for idx, f in enumerate(findings, start=1):
            details = f.get("finding_details", {})
            status_info = f.get("finding_status", {})
            cve_data = details.get("cve", {})
            cve_name = cve_data.get("name")
            component = details.get("component_filename")
            version = details.get("version")
            severity = details.get("severity")
            context_guid = f.get("context_guid")
            finding_guid = f.get("issue_id")
            scan_type = f.get("scan_type")
            violates = f.get("violates_policy")
            status = status_info.get("status")
            resolution = status_info.get("resolution")

            # === Log completo de todos os findings ===
            print(f"\n{idx}. {component} v{version}")
            print(f"    - CVE: {cve_name}")
            print(f"    - Severity: {severity}")
            print(f"    - Status: {status} | Resolution: {resolution}")
            print(f"    - Violates policy: {violates}")
            print(f"    - Context GUID: {context_guid}")
            print(f"    - Finding GUID: {finding_guid}")

            # === Aplicar FP apenas na CVE desejada ===
            if cve_name == TARGET_CVE:
                print(f"[→] Aplicando mitigação FP para {TARGET_CVE}...")
                resultado_fp = annotate_fp(APPLICATION_GUID, finding_guid, context_guid, scan_type)
                print(f"[✓] Anotado como FP: {resultado_fp}")
            else:
                print("[→] CVE não corresponde ao alvo. Nenhuma ação aplicada.")

    except requests.exceptions.HTTPError as e:
        print(f"[!] Erro HTTP: {e}")
        sys.exit(1)
    except Exception as ex:
        print(f"[!] Erro inesperado: {ex}")
        sys.exit(1)

# === Rodar ===
if __name__ == "__main__":
    executar_fp_para_cve_especifica()
