import sys
import requests
from veracode_api_signing.plugin_requests import RequestsAuthPluginVeracodeHMAC

# === Configuração da API ===
API_BASE_V2 = "https://api.veracode.com/appsec/v2"
API_BASE_V3 = "https://api.veracode.com/srcclr/v3"
HEADERS = {"User-Agent": "Python HMAC SCA Annotator"}

# === Parâmetros ===
APPLICATION_GUID = "SEU_APPLICATION_GUID_AQUI"  # << substitua aqui
TARGET_CVE = "CVE-2016-10532"  # << CVE que será anotada
COMMENT_FP = f"Mitigado como falso positivo para {TARGET_CVE} após revisão técnica."

# === Buscar findings SCA ===
def get_sca_findings(app_guid):
    url = f"{API_BASE_V2}/applications/{app_guid}/findings"
    params = {"scan_type": "SCA"}
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC(), headers=HEADERS, params=params)
    response.raise_for_status()
    return response.json()

# === Aplicar anotação FP via SCA ===
def annotate_sca_cve_fp(app_guid, component_id, cve_name, comment):
    url = f"{API_BASE_V3}/applications/{app_guid}/sca_annotations"
    payload = {
        "action": "FP",
        "comment": comment,
        "annotation_type": "VULNERABILITY",
        "annotations": [
            {
                "component_id": component_id,
                "cve_name": cve_name
            }
        ]
    }
    response = requests.post(url, json=payload, auth=RequestsAuthPluginVeracodeHMAC(), headers=HEADERS)
    response.raise_for_status()
    return response.json()

# === Execução principal ===
def executar_fp_para_cve_sca():
    try:
        print("[...] Buscando todos os findings SCA...")
        resultado = get_sca_findings(APPLICATION_GUID)
        findings = resultado.get("_embedded", {}).get("findings", [])
        print(f"[✓] Total de findings do tipo SCA encontrados: {len(findings)}")

        for idx, f in enumerate(findings, start=1):
            details = f.get("finding_details", {})
            status_info = f.get("finding_status", {})
            cve_data = details.get("cve", {})
            cve_name = cve_data.get("name")
            component = details.get("component_filename")
            version = details.get("version")
            severity = details.get("severity")
            component_id = details.get("component_id")
            violates = f.get("violates_policy")
            status = status_info.get("status")
            resolution = status_info.get("resolution")

            print(f"\n{idx}. {component} v{version}")
            print(f"    - CVE: {cve_name}")
            print(f"    - Severity: {severity}")
            print(f"    - Status: {status} | Resolution: {resolution}")
            print(f"    - Violates policy: {violates}")
            print(f"    - Component ID: {component_id}")

            if cve_name == TARGET_CVE:
                print(f"[→] Aplicando anotação FP via SCA para {TARGET_CVE}...")
                resultado_fp = annotate_sca_cve_fp(APPLICATION_GUID, component_id, cve_name, COMMENT_FP)
                print(f"[✓] Anotado como FP: {resultado_fp}")
            else:
                print("[→] CVE não corresponde ao alvo. Nenhuma ação aplicada.")

    except requests.exceptions.HTTPError as e:
        print(f"[!] Erro HTTP: {e}")
        sys.exit(1)
    except Exception as ex:
        print(f"[!] Erro inesperado: {ex}")
        sys.exit(1)

# === Rodar ===
if __name__ == "__main__":
    executar_fp_para_cve_sca()
