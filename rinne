import sys
import requests
from veracode_api_signing.plugin_requests import RequestsAuthPluginVeracodeHMAC

# === Configuração da API ===
API_BASE_V2 = "https://api.veracode.com/appsec/v2"
API_BASE_V1 = "https://api.veracode.com/appsec/v1"
HEADERS = {"User-Agent": "Python HMAC Example"}

# === Parâmetros ===
APPLICATION_GUID = "SEU_APPLICATION_GUID_AQUI"  # << coloque aqui seu GUID da aplicação

# === Buscar todos os findings ===
def get_all_findings(app_guid):
    url = f"{API_BASE_V2}/applications/{app_guid}/findings"
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC(), headers=HEADERS)
    response.raise_for_status()
    return response.json()

# === Aplicar anotação FP (opcional — comentado por enquanto) ===
# def annotate_fp(app_guid, finding_guid, context_guid, scan_type="STATIC", comment="Marcado como falso positivo"):
#     url = f"{API_BASE_V1}/applications/{app_guid}/annotations"
#     payload = {
#         "finding_guid": finding_guid,
#         "context_guid": context_guid,
#         "scan_type": scan_type,
#         "action": "FP",
#         "comment": comment
#     }
#     response = requests.post(url, json=payload, auth=RequestsAuthPluginVeracodeHMAC(), headers=HEADERS)
#     response.raise_for_status()
#     return response.json()

# === Execução principal ===
def listar_todos_os_findings():
    try:
        resultado = get_all_findings(APPLICATION_GUID)
        findings = resultado.get("_embedded", {}).get("findings", [])
        print(f"[✓] Total de findings encontrados: {len(findings)}")

        for idx, f in enumerate(findings, start=1):
            desc = f.get("description", "")
            scan_type = f.get("scan_type")
            finding_guid = f.get("issue_id")
            context_guid = f.get("context_guid")
            severity = f.get("finding_details", {}).get("severity")
            cve = f.get("finding_details", {}).get("cve", {}).get("name")
            violates = f.get("violates_policy")

            print(f"\n{idx}. {desc[:100]}...")
            print(f"    - Scan type: {scan_type}")
            print(f"    - Severity: {severity}")
            print(f"    - CVE: {cve}")
            print(f"    - Violates policy: {violates}")
            print(f"    - Finding GUID: {finding_guid}")
            print(f"    - Context GUID: {context_guid}")

            # Descomente abaixo se quiser aplicar anotação automática
            # resultado_fp = annotate_fp(APPLICATION_GUID, finding_guid, context_guid, scan_type)
            # print(f"    → Annotated as FP: {resultado_fp}")

    except requests.exceptions.HTTPError as e:
        print(f"[!] Erro HTTP: {e}")
        sys.exit(1)
    except Exception as ex:
        print(f"[!] Erro inesperado: {ex}")
        sys.exit(1)

# === Rodar ===
if __name__ == "__main__":
    listar_todos_os_findings()
