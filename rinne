import sys
import requests
from veracode_api_signing.plugin_requests import RequestsAuthPluginVeracodeHMAC

# === Configuração da API ===
API_BASE_V2 = "https://api.veracode.com/appsec/v2"
API_BASE_V1 = "https://api.veracode.com/appsec/v1"
HEADERS = {"User-Agent": "Python HMAC SCA Scanner"}

# === Parâmetros ===
APPLICATION_GUID = "SEU_APPLICATION_GUID_AQUI"  # << substitua pelo GUID correto da aplicação

# === Buscar apenas findings de tipo SCA ===
def get_sca_findings(app_guid):
    url = f"{API_BASE_V2}/applications/{app_guid}/findings"
    params = {"scan_type": "SCA"}  # Filtra só achados da análise de composição
    response = requests.get(url, auth=RequestsAuthPluginVeracodeHMAC(), headers=HEADERS, params=params)
    response.raise_for_status()
    return response.json()

# === Aplicar anotação FP (opcional — comentado) ===
# def annotate_fp(app_guid, finding_guid, context_guid, scan_type="SCA", comment="Mitigado como falso positivo"):
#     url = f"{API_BASE_V1}/applications/{app_guid}/annotations"
#     payload = {
#         "finding_guid": finding_guid,
#         "context_guid": context_guid,
#         "scan_type": scan_type,
#         "action": "FP",
#         "comment": comment
#     }
#     response = requests.post(url, json=payload, auth=RequestsAuthPluginVeracodeHMAC(), headers=HEADERS)
#     response.raise_for_status()
#     return response.json()

# === Execução principal ===
def listar_findings_sca():
    try:
        resultado = get_sca_findings(APPLICATION_GUID)
        findings = resultado.get("_embedded", {}).get("findings", [])
        print(f"[✓] Total de findings do tipo SCA encontrados: {len(findings)}")

        for idx, f in enumerate(findings, start=1):
            details = f.get("finding_details", {})
            cve_data = details.get("cve", {})
            component = details.get("component_filename")
            severity = details.get("severity")
            version = details.get("version")
            context_guid = f.get("context_guid")
            finding_guid = f.get("issue_id")
            scan_type = f.get("scan_type")
            violates = f.get("violates_policy")

            print(f"\n{idx}. Componente: {component} (v{version})")
            print(f"    - CVE: {cve_data.get('name')}")
            print(f"    - Severity: {severity}")
            print(f"    - Violates Policy: {violates}")
            print(f"    - Scan Type: {scan_type}")
            print(f"    - GUIDs → Context: {context_guid} | Finding: {finding_guid}")

            # Descomente abaixo para aplicar anotação FP automaticamente
            # resultado_fp = annotate_fp(APPLICATION_GUID, finding_guid, context_guid, scan_type)
            # print(f"    → Annotado como FP: {resultado_fp}")

    except requests.exceptions.HTTPError as e:
        print(f"[!] Erro HTTP: {e}")
        sys.exit(1)
    except Exception as ex:
        print(f"[!] Erro inesperado: {ex}")
        sys.exit(1)

# === Rodar ===
if __name__ == "__main__":
    listar_findings_sca()
