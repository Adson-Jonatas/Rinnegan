import requests
import os
from veracode_hmac.signer import generate_headers

# === LER CREDENCIAIS DO ARQUIVO ===
def carregar_credenciais(path="~/.veracode/api_credentials.txt"):
    cred_path = os.path.expanduser(path)
    with open(cred_path, "r") as f:
        linhas = f.readlines()
    creds = dict(l.strip().split("=") for l in linhas if "=" in l)
    return creds["veracode_api_key_id"], creds["veracode_api_key_secret"]

# === CHAMADA GET COM HMAC ===
def get_findings_by_cve(app_guid, cve_id):
    api_id, api_secret = carregar_credenciais()
    url = f"https://api.veracode.com/appsec/v2/applications/{app_guid}/findings"
    params = {"cve": cve_id}
    headers = generate_headers("GET", url, "", api_id, api_secret)
    response = requests.get(url, headers=headers, params=params)
    response.raise_for_status()
    return response.json()

# === EXECUTAR TESTE ===
if __name__ == "__main__":
    app_guid = "SEU_APP_GUID_AQUI"
    cve_id = "CVE-2016-10532"  # exemplo

    try:
        result = get_findings_by_cve(app_guid, cve_id)
        achados = result.get("_embedded", {}).get("findings", [])
        print(f"Encontrados {len(achados)} achado(s) para {cve_id}.")
        for achado in achados:
            print(f"- {achado.get('description')[:100]}...")
    except requests.exceptions.HTTPError as e:
        print(f"[!] Erro HTTP: {e}")
    except Exception as ex:
        print(f"[!] Erro inesperado: {ex}")
